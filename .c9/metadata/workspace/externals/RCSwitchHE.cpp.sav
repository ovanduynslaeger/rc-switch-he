{"changed":true,"filter":false,"title":"RCSwitchHE.cpp.sav","tooltip":"/externals/RCSwitchHE.cpp.sav","value":"#include \"RCSwitchHE.h\"\n\n\nRCSwitchHE::RCSwitchHE() {\n this->pin=0;\n}\n\n\n/*\nvoid RCSwitchHE::scheduler_realtime() {\n  struct sched_param p;\n  p.__sched_priority = sched_get_priority_max(SCHED_RR);\n  if( sched_setscheduler( 0, SCHED_RR, &p ) == -1 ) {\n    //perror(\"Failed to switch to realtime scheduler.\");\n    //ERROR\n  }\n}\n\nvoid RCSwitchHE::scheduler_standard() {\n struct sched_param p;\n p.__sched_priority = 0;\n if( sched_setscheduler( 0, SCHED_OTHER, &p ) == -1 ) {\n   //perror(\"Failed to switch to normal scheduler.\");\n   //ERROR\n }\n}\n*/\n\n\n//Envois d'une pulsation (passage de l'etat haut a l'etat bas)\n//1 = 310Âµs haut puis 1340Âµs bas\n//0 = 310Âµs haut puis 310Âµs bas\nvoid RCSwitchHE::sendBit(bool b) {\n if (b) {\n   digitalWrite(pin, HIGH);\n   /delayMicroseconds(310);   //275 orinally, but tweaked.\n   digitalWrite(pin, LOW);\n   delayMicroseconds(1340);  //1225 orinally, but tweaked.\n }\n else {\n   digitalWrite(pin, HIGH);\n   delayMicroseconds(310);   //275 orinally, but tweaked.\n   digitalWrite(pin, LOW);\n   delayMicroseconds(310);   //275 orinally, but tweaked.\n }\n}\n\n//Calcul le nombre 2^chiffre indiquÃ©, fonction utilisÃ© par itob pour la conversion decimal/binaire\nunsigned long RCSwitchHE::power2(int power){\n unsigned long integer=1;\n for (int i=0; i<power; i++){\n   integer*=2;\n }\n return integer;\n} \n\n//Convertis un nombre en binaire, nÃ©cessite le nombre, et le nombre de bits souhaitÃ© en sortie (ici 26)\n// Stocke le rÃ©sultat dans le tableau global \"bit2\"\nvoid RCSwitchHE::itob(unsigned long integer, int length)\n{\n\tfor (int i=0; i<length; i++){\n\t  if ((integer / power2(length-1-i))==1){\n\t\tinteger-=power2(length-1-i);\n\t\tbit2[i]=1;\n\t  }\n\t  else bit2[i]=0;\n\t}\n}\n\nvoid RCSwitchHE::itobInterruptor(unsigned long integer, int length)\n{\n\tfor (int i=0; i<length; i++){\n\t  if ((integer / power2(length-1-i))==1){\n\t\tinteger-=power2(length-1-i);\n\t\tbit2Interruptor[i]=1;\n\t  }\n\t  else bit2Interruptor[i]=0;\n\t}\n}\n\n\n\n\n//Envoie d'une paire de pulsation raHE qui definissent 1 bit rÃ©el : 0 =01 et 1 =10\n//c'est le codage de manchester qui necessite ce petit bouzin, ceci permet entre autres de dissocier les donnÃ©es des parasites\nvoid RCSwitchHE::sendPair(bool b) {\n if(b)\n {\n   sendBit(true);\n   sendBit(false);\n }\n else\n {\n   sendBit(false);\n   sendBit(true);\n }\n}\n\n\n//Fonction d'envois du signal\n//recoit en parametre un booleen dÃ©finissant l'arret ou la marche du matos (true = on, false = off)\nvoid RCSwitchHE::transmit(int blnOn)\n{\n int i;\n\n // Sequence de verrou anoncant le dÃ©part du signal au recepeteur\n digitalWrite(pin, HIGH);\n delayMicroseconds(275);     // un bit de bruit avant de commencer pour remettre les delais du recepteur a 0\n digitalWrite(pin, LOW);\n delayMicroseconds(9900);     // premier verrou de 9900Âµs\n digitalWrite(pin, HIGH);   // high again\n delayMicroseconds(275);      // attente de 275Âµs entre les deux verrous\n digitalWrite(pin, LOW);    // second verrou de 2675Âµs\n delayMicroseconds(2675);\n digitalWrite(pin, HIGH);  // On reviens en Ã©tat haut pour bien couper les verrous des donnÃ©es\n\n // Envoie du code emetteur (272946 = 1000010101000110010  en binaire)\n for(i=0; i<26;i++)\n {\n   sendPair(bit2[i]);\n }\n\n // Envoie du bit dÃ©finissant si c'est une commande de groupe ou non (26em bit)\n sendPair(false);\n\n // Envoie du bit dÃ©finissant si c'est allumÃ© ou eteint 27em bit)\n sendPair(blnOn);\n\n // Envoie des 4 derniers bits, qui reprÃ©sentent le code interrupteur, ici 0 (encode sur 4 bit donc 0000)\n // nb: sur  les tÃ©lÃ©commandes officielle chacon, les interrupteurs sont logiquement nommÃ©s de 0 Ã  x\n // interrupteur 1 = 0 (donc 0000) , interrupteur 2 = 1 (1000) , interrupteur 3 = 2 (0100) etc...\n  for(i=0; i<4;i++)\n {\n if(bit2Interruptor[i]==0){\n\tsendPair(false);\n }else{\n\tsendPair(true);\n }\n}\n \n digitalWrite(pin, HIGH);   // coupure donnÃ©es, verrou\n delayMicroseconds(275);      // attendre 275Âµs\n digitalWrite(pin, LOW);    // verrou 2 de 2675Âµs pour signaler la fermeture du signal\n\n}\n\n\n/** PUBLIC **/\n\n\n/**\n * Switch a remote switch on\n *\n * @param nDevice  Device Code\n */\nvoid RCSwitchHE::switchOn(int nDevice) {\n //scheduler_realtime();\n itobInterruptor(nDevice,4);\n for(int i=0;i<5;i++){\n\t\t transmit(true);            // envoyer ON\n\t\t delay(10);                 // attendre 10 ms (sinon le socket nous ignore)\n }\n\t//scheduler_standard();\n}\n \n\n/**\n * Switch a remote switch off\n *\n * @param nDevice  Device Code\n */\nvoid RCSwitchHE::switchOff(int nDevice) {\n\t//scheduler_realtime();\n itobInterruptor(nDevice,4);\n for(int i=0;i<5;i++){\n\t\t transmit(false);            // envoyer OFF\n\t\t delay(10);                 // attendre 10 ms (sinon le socket nous ignore)\n }\n\t//scheduler_standard();\n}\n\n\n/**\n * Enable transmissions\n *\n * @param nTransmitterPin    Arduino Pin to which the sender is connected to\n */\nvoid RCSwitchHE::enableTransmit(int nTransmitterPin) {\n    if(wiringPiSetup() == -1)\n    {\n        //ERROR\n    }\n    this->pin = nTransmitterPin;\n    pinMode(nTransmitterPin, OUTPUT);\n}\n\n/**\n * Set Remote Code\n *\n * @param senderCode   Remote Code\n */\nvoid RCSwitchHE::setRemoteCode(int senderCode) {\n  this->sender = senderCode;\n  itob(this->sender,26);            \n}\n\n","undoManager":{"mark":-2,"position":8,"stack":[[{"start":{"row":36,"column":26},"end":{"row":36,"column":27},"action":"insert","lines":["c"],"id":1}],[{"start":{"row":36,"column":27},"end":{"row":36,"column":28},"action":"insert","lines":["a"],"id":2}],[{"start":{"row":36,"column":28},"end":{"row":36,"column":29},"action":"insert","lines":["l"],"id":3}],[{"start":{"row":36,"column":29},"end":{"row":36,"column":30},"action":"insert","lines":["c"],"id":4}],[{"start":{"row":36,"column":29},"end":{"row":36,"column":30},"action":"remove","lines":["c"],"id":5}],[{"start":{"row":36,"column":28},"end":{"row":36,"column":29},"action":"remove","lines":["l"],"id":6}],[{"start":{"row":36,"column":27},"end":{"row":36,"column":28},"action":"remove","lines":["a"],"id":7}],[{"start":{"row":36,"column":26},"end":{"row":36,"column":27},"action":"remove","lines":["c"],"id":8}],[{"start":{"row":35,"column":3},"end":{"row":35,"column":4},"action":"insert","lines":["/"],"id":9}],[{"start":{"row":35,"column":4},"end":{"row":35,"column":5},"action":"insert","lines":["/"],"id":10}]]},"ace":{"folds":[],"scrolltop":278.36361026763916,"scrollleft":0,"selection":{"start":{"row":23,"column":10},"end":{"row":23,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":19,"state":"start","mode":"ace/mode/text"}},"timestamp":1426115753000}